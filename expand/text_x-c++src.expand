#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Expansions in this file:
#
#   cl(name[, T0[, T1[, ...[, Tn]]]])
#       Insert a class definition, possible w/ template parameters
#
#
#   st(name[, T0[, T1[, ...[, Tn]]]])
#       Insert a structure definition, possible w/ template parameters
#
#
#   t(T0[, T1[, ...[, Tn]]])
#       Insert a `template <typename T0, ..., typename Tn>' string
#
#
#   brief
#       Render a Doxygen \brief header
#
#
#   gs(type, member-name[, ref = No])
#       Insert simple getter/setter implementation for given member and type
#
#
#   main
#       Insert simple main() function
#
#
#   ns([name[::nested[::name]]])
#       Insert namespace(s). If name ommited anonymous namespace will be rendered.
#
#


from libkatepate import ui

_BRIEF_DOC_TPL = '''
/**
 * \\brief Class \c {0}
 */'''
_TEMPLATE_PARAMS_TPL = '''
template <{1}>'''
_CLASS_BODY_TPL = '''
class {0}
{{
public:
    /// Default constructor
    %{{cursor}}explicit {0}()
    {{
    }}
    /// Destructor
    virtual ~{0}()
    {{
    }}
}};
'''
_STRUCT_BODY_TPL = '''
struct {0}
{{
}};
'''

_NS_TPL = '''namespace {0} {{
%{{cursor}}
{1}{2}// namespace {3}
'''

_ANONYMOUS_NS_TPL = '''namespace {{
%{{cursor}}
}}                                                           // anonymous namespace
'''


def st(name, *templateParams):
    ''' Insert a structure definition

        A first mandatory parameter is a structure name.
        Everything after that will be template parameters.
          st(foo, T, U, V)

        will expand into:
          template <typename T, typename U, typename V>
          struct foo
          {
          };
    '''
    params = [name]
    if len(templateParams):
        template = _BRIEF_DOC_TPL + _TEMPLATE_PARAMS_TPL + _STRUCT_BODY_TPL
        params.append('typename ' + ', typename '.join(templateParams))
    else:
        template = _BRIEF_DOC_TPL + _STRUCT_BODY_TPL
    return template.format(*params)


def cl(name, *templateParams):
    ''' Insert a class definition

        TODO It would be neat to have syntax like this:
            cl(test, T, U, d=v, cc=del, mv=def)
          i.e. define a class 'test' w/ template params T and U,
          w/ virtual dtor, w/ deleted copy ctor/assign and w/
          defaulted move ctor/assign.

          Isn't it?
    '''
    params = [name]
    if len(templateParams):
        template = _BRIEF_DOC_TPL + _TEMPLATE_PARAMS_TPL + _CLASS_BODY_TPL
        params.append('typename ' + ', typename '.join(templateParams))
    else:
        template = _BRIEF_DOC_TPL + _CLASS_BODY_TPL
    return template.format(*params)


def t(*params):
    '''Render template header w/ given template parameters list
    '''
    return 'template <typename ' + ', typename '.join(params) + '>'

def brief():
    ''' Render a Doxygen brief header
    '''
    return \
'''/**
 * \\brief %{cursor}
 *
 */'''

def ns(name = None):
    ''' Insert named or anonymous namespace
    '''
    params = []
    if bool(name):
        nsList = [ns.strip() for ns in name.split('::')]
        params.append(' { namespace '.join(nsList))         # NS header
        params.append('}' * len(nsList))                    # NS close curve brackets
        params.append(' ' * (60 - len(nsList)))             # space padding before comment
        params.append(', '.join(reversed(nsList)))          # NS close comment line
        template = _NS_TPL
    else:
        template = _ANONYMOUS_NS_TPL
    return template.format(*params)

def gs(typeT, name, ref = None):
    ''' Insert getter/setter for member

        NOTE If member has a one of "standard" prefix 'm_' or suffix '_',
            accessor name will be w/o it!
    '''
    template = \
'''{0} {1}() const
{{
    return {2};
}}
void {1}({0} value)
{{
    {2} = value;
}}%{{cursor}}
'''
    if ref == None:
        arg = typeT
    else:
        arg = 'const ' + typeT + ref

    if name.startswith('m_'):                               # Usual code style: members start w/ 'm_' prefix
        pure_name = name[2:]
    elif name.endswith('_'):                                # Google code style: members end w/ '_' suffix
        pure_name = name[0:-1]
    else:
        pure_name = name

    return template.format(arg, pure_name, name)

def main():
    return \
'''int main(int argc, const char* const argv[])
{
    %{cursor}
    return 0;
}
'''
