# -*- coding: utf-8 -*-
#
# Expansions in this file:
#
#   cl(name[, T0[, T1[, ...[, Tn]]]])
#       Insert a class definition, possible w/ template parameters
#
#
#   st(name[, T0[, T1[, ...[, Tn]]]])
#       Insert a structure definition, possible w/ template parameters
#
#
#   t(T0[, T1[, ...[, Tn]]])
#       Insert a `template <typename T0, ..., typename Tn>' string
#
#
#   brief
#       Render a Doxygen \brief header
#
#
#   gs(type, member-name[, ref = No])
#       Insert simple getter/setter implementation for given member and type
#
#
#   main([args=True])
#       Insert simple main() function.
#
#
#   ns([name[::nested[::name]]])
#       Insert namespace(s). If name ommited anonymous namespace will be rendered.
#
#
#   sw(expr[, case1[, case2[, ..., caseN]]])
#       Render switch statement w/ a given expression and possible cases.
#       If caseX == 'd' or 'default' --> render `default: break;' instead of case,
#       so its better to put 'd' at the end of parameters list.
#


from libkatepate import ui

_BRIEF_DOC_TPL = \
'''/**
 * \\brief Class \c {0}
 */'''

_TEMPLATE_PARAMS_TPL = '''
template <{1}>'''

_CLASS_BODY_TPL = '''
class {0}
{{
public:
\t/// Default constructor
\t%{{cursor}}explicit {0}()
\t{{
\t}}
\t/// Destructor
\tvirtual ~{0}()
\t{{
\t}}
}};
'''

_STRUCT_BODY_TPL = '''
struct {0}
{{
}};
'''

_PURE_BRIEF_DOC_TPL = '''/**
 * \\brief %{cursor}
 *
 */'''

_NS_TPL = '''namespace {0} {{
%{{cursor}}
{1}{2}// namespace {3}
'''

_ANONYMOUS_NS_TPL = '''namespace {{
%{{cursor}}
}}                                                           // anonymous namespace
'''

_GET_SET_TPL = '''{0} {1}() const
{{
    return {2};
}}
void {1}({0} value)
{{
    {2} = value;
}}%{{cursor}}
'''

_MAIN_WITH_ARGS_TPL = '''int main(int argc, const char* const argv[])
{
\t%{cursor}
\treturn 0;
}
'''

_MAIN_TPL = '''int main()
{
\treturn 0;
}'''

_EMPTY_SWITCH_TPL = '''switch (%{cursor})
{
\tcase :
\t\tbreak;
\tdefault:
\t\tbreak;
}'''

_SWITCH_TPL = '''switch ({0})
{{
{1}}}'''


def st(name, *templateParams):
    ''' Insert a structure definition

        A first mandatory parameter is a structure name.
        Everything after that will be template parameters.
          st(foo, T, U, V)

        will expand into:
          template <typename T, typename U, typename V>
          struct foo
          {
          };
    '''
    params = [name]
    if len(templateParams):
        template = _BRIEF_DOC_TPL + _TEMPLATE_PARAMS_TPL + _STRUCT_BODY_TPL
        params.append('typename ' + ', typename '.join(templateParams))
    else:
        template = _BRIEF_DOC_TPL + _STRUCT_BODY_TPL
    return template.format(*params)


def cl(name, *templateParams):
    ''' Insert a class definition

        TODO It would be neat to have syntax like this:
            cl(test, T, U, d=v, cc=del, mv=def)
          i.e. define a class 'test' w/ template params T and U,
          w/ virtual dtor, w/ deleted copy ctor/assign and w/
          defaulted move ctor/assign.

          Isn't it?
    '''
    params = [name]
    if len(templateParams):
        template = _BRIEF_DOC_TPL + _TEMPLATE_PARAMS_TPL + _CLASS_BODY_TPL
        params.append('typename ' + ', typename '.join(templateParams))
    else:
        template = _BRIEF_DOC_TPL + _CLASS_BODY_TPL
    return template.format(*params)


def t(*params):
    '''Render template header w/ given template parameters list
    '''
    return 'template <typename ' + ', typename '.join(params) + '>'


def brief():
    ''' Render a Doxygen brief header
    '''
    return _PURE_BRIEF_DOC_TPL


def ns(name = None):
    ''' Insert named or anonymous namespace
    '''
    params = []
    if bool(name):
        nsList = [ns.strip() for ns in name.split('::')]
        params.append(' { namespace '.join(nsList))         # NS header
        params.append('}' * len(nsList))                    # NS close curve brackets
        params.append(' ' * (60 - len(nsList)))             # space padding before comment
        params.append(', '.join(reversed(nsList)))          # NS close comment line
        template = _NS_TPL
    else:
        template = _ANONYMOUS_NS_TPL
    return template.format(*params)


def gs(typeT, name, ref = None):
    ''' Insert getter/setter for member

        NOTE If member has a one of "standard" prefix 'm_' or suffix '_',
            accessor name will be w/o it!
    '''
    template = _GET_SET_TPL

    if ref == None:
        arg = typeT
    else:
        arg = 'const ' + typeT + ref

    if name.startswith('m_'):                               # Usual code style: members start w/ 'm_' prefix
        pure_name = name[2:]
    elif name.endswith('_'):                                # Google code style: members end w/ '_' suffix
        pure_name = name[0:-1]
    else:
        pure_name = name

    return template.format(arg, pure_name, name)


def main(args=True):
    '''Render main() function'''
    if args:
        return _MAIN_WITH_ARGS_TPL
    return _MAIN_TPL


def sw(expr = None, *caseList):
    ''' Render switch() statement w/ a list of cases'''
    if expr:
        if caseList:
            caseStr = ''
            for case in caseList:
                if case == 'd' or case == 'def' or case == 'default':
                    caseStr += '\tdefault:\n\t\tbreak;\n'
                else:
                    caseStr += '\tcase ' + case +':\n\t\tbreak;\n'
            caseStr += '%{cursor}'
        else:
            caseStr = '\tcase :%{cursor}\n\t\tbreak;\n'
        return _SWITCH_TPL.format(expr, caseStr)
    else:
        return _EMPTY_SWITCH_TPL

def test(expr):
    return '{\n\t%{cursor}' + expr + '\n}'
# kate: hl python;
